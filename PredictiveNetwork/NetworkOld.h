#pragma once
#include <iostream>
#include <glad.h>
#include "shader.h"
#include <iomanip>
#include <sstream>
#include <string>

std::string formatFloat(float value, int precision = 7) {
	std::ostringstream oss;
	oss << std::fixed << std::setprecision(precision) << value;

	std::string result = oss.str();

	// Trim trailing zeros after the decimal point
	if (result.find('.') != std::string::npos) {
		// Remove trailing zeros
		result.erase(result.find_last_not_of('0') + 1);

		// Ensure at least one digit after decimal
		if (result.back() == '.') {
			result += '0';
		}
	}

	return result;
}
constexpr float rateT = 1.0f;
constexpr float rateS = 1.0f;
constexpr float rateR = 0.8f;

float softsign(const float x) {
	return x / (1.0f + std::abs(x));
}

float softsignd(const float x) {
	float inter = (1.0f + std::abs(x));
	return 1.0f / (inter * inter);
}

struct Node { float value, error; };

struct NetworkOld {

	const static float actPos[128u];
	const static float weightPos[3584u];
	const static float weightColor[896u];
	const static float box[4u];


	GLuint
		nodePosVBO, nodeColVBO, nodeVAO, nodeShader,
		weightPosVBO, weightCol1VBO, weightCol2VBO, weightVAO, weightShader;

	float energy;
	bool latch;

	// 8 Layers of 8 Nodes
	Node act[64u];

	// forward weights | backward weights
	// 0-63:    L0F    | 448-511: L1B
	// 64-127:  L1F    | 512-575: L2B
	// 128-191: L2F    | 576-639: L3B
	// 192-255: L3F    | 640-703: L4B
	// 256-319: L4F    | 704-767: L5B
	// 320-383: L5F    | 768-831: L6B
	// 384-447: L6F    | 832-895: L7B
	float weights[896];

	NetworkOld(): energy(0.0f), latch(false) {
		for (Node* n = act; n < act + 64u; n++) *n = {0.0f, 0.0f};
		for (float* f = weights; f < weights + 896u; f++) *f = ((float)std::rand() / (float)RAND_MAX) * 1.0f; //((float)std::rand() / (float)RAND_MAX) * 0.1f;

		glGenBuffers(1u, &nodePosVBO);
		glGenBuffers(1u, &nodeColVBO);
		glGenVertexArrays(1u, &nodeVAO);
		nodeShader = Shader::create("nodeShader.vert", "nodeShader.geom", "nodeShader.frag");

		glBindVertexArray(nodeVAO);

		glBindBuffer(GL_ARRAY_BUFFER, nodePosVBO);
		glBufferData(GL_ARRAY_BUFFER, 128u * sizeof(float), actPos, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 0, 0);
		glEnableVertexAttribArray(0);

		glBindBuffer(GL_ARRAY_BUFFER, nodeColVBO);
		glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 0, 0);
		glEnableVertexAttribArray(1);

		glBindBuffer(GL_ARRAY_BUFFER, 0u);
		glBindVertexArray(0u);

		glGenBuffers(1u, &weightPosVBO);
		glGenBuffers(1u, &weightCol1VBO);
		glGenBuffers(1u, &weightCol2VBO);
		glGenVertexArrays(1u, &weightVAO);
		weightShader = Shader::create("weightShader.vert", "weightShader.geom", "weightShader.frag");

		glBindVertexArray(weightVAO);

		glBindBuffer(GL_ARRAY_BUFFER, weightPosVBO);
		glBufferData(GL_ARRAY_BUFFER, 3584u * sizeof(float), weightPos, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 4, GL_FLOAT, GL_FALSE, 0, 0);
		glEnableVertexAttribArray(0);

		glBindBuffer(GL_ARRAY_BUFFER, weightCol1VBO);
		glVertexAttribPointer(1, 1, GL_FLOAT, GL_FALSE, 0, 0);
		glEnableVertexAttribArray(1);

		glBindBuffer(GL_ARRAY_BUFFER, weightCol2VBO);
		glBufferData(GL_ARRAY_BUFFER, 896u * sizeof(float), weightColor, GL_STATIC_DRAW);
		glVertexAttribPointer(2, 1, GL_FLOAT, GL_FALSE, 0, 0);
		glEnableVertexAttribArray(2);

		glBindBuffer(GL_ARRAY_BUFFER, 0u);
		glBindVertexArray(0u);
	}

	void train(float* input, float* train) {

		for (uint32_t n = 0u; n < 8u; n++) {
			act[n].value = input[n];
			act[n + 32u].value = train[n];
		}


		// Which layers
		for (uint32_t layer = 0u; layer < 8u; layer++) {

			uint32_t layerPrev = ((layer - 1u) % 8u) * 8u;
			uint32_t layerNext = ((layer + 1u) % 8u) * 8u;
			uint32_t layerCurr = layer * 8u;
			// which node in the layer

			float weightRateE = 0.0f;
			for (uint32_t i = 0u; i < 8u; i++) { float v = softsign(act[layerPrev + i].value); weightRateE += v * v; }
			weightRateE = 1.0f / weightRateE;

			float weightRateA = 0.0f;
			for (uint32_t i = 0u; i < 8u; i++) { float v = softsign(act[layerCurr + i].value); weightRateA += v * v; }
			weightRateA = 1.0f / weightRateA;

			for (uint32_t node = 0u; node < 8u; node++) {
				uint32_t nodeID = layerCurr + node;
				uint32_t weightIDForwMin = (64u * layer) + (8u * node);
				uint32_t weightIDForwMax = weightIDForwMin + 8u;
				uint32_t weightIDBackMin = weightIDForwMin + 384u;
				uint32_t weightIDBackMax = weightIDBackMin + 8u;

				Node n = act[nodeID];
				
				// Errors
				n.error = softsign(n.value);
				for (uint32_t i = weightIDBackMin, j = 0u; i < weightIDBackMax && j < 8u; i++, j++) {
					n.error -= weights[i] * softsign(act[layerPrev + j].value);
				}
				for (uint32_t i = weightIDBackMin, j = 0u; i < weightIDBackMax && j < 8u; i++, j++) {
					weights[i] += weightRateE * softsign(act[layerPrev + j].value) * n.error;
					if (std::isnan(weights[i]) || std::isinf(weights[i])) weights[i] = ((float)std::rand() / (float)RAND_MAX) * 0.0000001f;
				}

				// Activations
				n.value -= n.error * softsignd(n.value);
				float inter = softsign(act[nodeID].value);
				float interd = softsignd(act[nodeID].value);
				for (uint32_t i = weightIDForwMin, j = 0u; i < weightIDForwMax && j < 8u; i++, j++) {
					n.value += interd * weights[i] * act[layerNext + j].error;
				}
				for (uint32_t i = weightIDForwMin, j = 0u; i < weightIDForwMax && j < 8u; i++, j++) {
					weights[i] += weightRateA * inter * act[layerNext + j].error;
					if (std::isnan(weights[i]) || std::isinf(weights[i])) weights[i] = ((float)std::rand() / (float)RAND_MAX) * 0.0000001f;
				}
				if (std::isnan(n.value) || std::isinf(n.value)) n.value = ((float)std::rand() / (float)RAND_MAX) * 0.0000001f;
				if (std::isnan(n.error) || std::isinf(n.error)) n.error = ((float)std::rand() / (float)RAND_MAX) * 0.0000001f;

				act[nodeID] = n;
			}
		}
	}

	void sleep() {
		// Which layers
		for (uint32_t layer = 0u; layer < 8u; layer++) {

			uint32_t layerPrev = (layer - 1u) * 8u;
			uint32_t layerNext = (layer + 1u) * 8u;
			uint32_t layerCurr = layer * 8u;
			// which node in the layer

			float weightRateE = 0.0f;
			if (layer > 0u) {
				for (uint32_t i = 0u; i < 8u; i++) { float v = softsign(act[layerPrev + i].value); weightRateE += v * v; }
				weightRateE = 1.0f / weightRateE;
			}

			float weightRateA = 0.0f;
			if (layer < 7u) {
				for (uint32_t i = 0u; i < 8u; i++) { float v = softsign(act[layerCurr + i].value); weightRateA += v * v; }
				weightRateA = 1.0f / weightRateA;
			}

			for (uint32_t node = 0u; node < 8u; node++) {
				uint32_t nodeID = layerCurr + node;
				uint32_t weightIDForwMin = (64u * layer) + (8u * node);
				uint32_t weightIDForwMax = weightIDForwMin + 8u;
				uint32_t weightIDBackMin = weightIDForwMin + 384u;
				uint32_t weightIDBackMax = weightIDBackMin + 8u;

				Node n = act[nodeID];

				// Errors
				n.error = rateS * softsign(n.value);
				if (layer > 0u) {
					for (uint32_t i = weightIDBackMin, j = 0u; i < weightIDBackMax && j < 8u; i++, j++) {
						n.error -= rateS * weights[i] * softsign(act[layerPrev + j].value);
					}
					for (uint32_t i = weightIDBackMin, j = 0u; i < weightIDBackMax && j < 8u; i++, j++) {
						weights[i] += rateS * weightRateE * softsign(act[layerPrev + j].value) * n.error;
						if (std::isnan(weights[i]) || std::isinf(weights[i])) weights[i] = ((float)std::rand() / (float)RAND_MAX) * 0.0000001f;
					}
				}

				// Activations
				n.value -= rateS * n.error * softsignd(n.value);
				if (layer < 7u) {
					float inter = softsign(act[nodeID].value);
					float interd = softsignd(act[nodeID].value);
					for (uint32_t i = weightIDForwMin, j = 0u; i < weightIDForwMax && j < 8u; i++, j++) {
						n.value += rateS * interd * weights[i] * act[layerNext + j].error;
					}
					for (uint32_t i = weightIDForwMin, j = 0u; i < weightIDForwMax && j < 8u; i++, j++) {
						weights[i] += rateS * weightRateA * inter * act[layerNext + j].error;
						if (std::isnan(weights[i]) || std::isinf(weights[i])) weights[i] = ((float)std::rand() / (float)RAND_MAX) * 0.0000001f;
					}
				}
				if (std::isnan(n.value) || std::isinf(n.value)) n.value = ((float)std::rand() / (float)RAND_MAX) * 0.0000001f;
				if (std::isnan(n.error) || std::isinf(n.error)) n.error = ((float)std::rand() / (float)RAND_MAX) * 0.0000001f;

				act[nodeID] = n;
			}
		}
	}

	void run(float *input) {
		for (uint32_t n = 0u; n < 8u; n++) {
			act[n].value = input[n];
		}
		// Which layers
		for (uint32_t layer = 0u; layer < 8u; layer++) {

			uint32_t layerPrev = (layer - 1u) * 8u;
			uint32_t layerNext = (layer + 1u) * 8u;
			// which node in the layer
			for (uint32_t node = 0u; node < 8u; node++) {
				uint32_t nodeID = (8u * layer) + node;
				uint32_t weightIDForwMin = (64u * layer) + (8u * node);
				uint32_t weightIDForwMax = weightIDForwMin + 7u;
				uint32_t weightIDBackMin = weightIDForwMin + 384u;
				uint32_t weightIDBackMax = weightIDBackMin + 7u;

				Node n = act[nodeID];

				// Errors
				n.error = rateR * n.value;
				if (layer > 0u) {
					for (uint32_t i = weightIDBackMin, j = 0u; i < weightIDBackMax && j < 8u; i++, j++) {
						n.error -= rateR * weights[i] * softsign(act[layerPrev + j].value);
					}
					/*for (uint32_t i = weightIDBackMin, j = 0u; i < weightIDBackMax && j < 8u; i++, j++) {
						weights[i] += rateR * softsign(act[layerPrev + j].value) * n.error;
						if (std::isnan(weights[i]) || std::isinf(weights[i])) weights[i] = ((float)std::rand() / (float)RAND_MAX) * 0.0000001f;
					}*/
				}
				if (std::isnan(n.error) || std::isinf(n.error)) n.error = ((float)std::rand() / (float)RAND_MAX) * 0.0000001f;
				// Activations
				n.value -= rateR * n.error;
				if (layer < 7u) {
					float inter = softsign(act[nodeID].value);
					float interd = softsignd(act[nodeID].value);
					for (uint32_t i = weightIDForwMin, j = 0u; i < weightIDForwMax && j < 8u; i++, j++) {
						n.value += rateR * interd * weights[i] * act[layerNext + j].error;
					}
					/*for (uint32_t i = weightIDForwMin, j = 0u; i < weightIDForwMax && j < 8u; i++, j++) {
						weights[i] += rateR * inter * act[layerNext + j].error;
						if (std::isnan(weights[i]) || std::isinf(weights[i])) weights[i] = ((float)std::rand() / (float)RAND_MAX) * 0.0000001f;
					}*/
				}
				if (std::isnan(n.value) || std::isinf(n.value)) n.value = ((float)std::rand() / (float)RAND_MAX) * 0.0000001f;
				act[nodeID] = n;
			}
		}
	}

	void print() {
		std::cout << "Error: ";
		float s = 0.0f;
		for (uint32_t i = 0u; i < 64u; i++) s += act[i].error * act[i].error;
		std::cout << s << (latch ? " Running" : " Training") << "\n";
		/*std::cout << "Activations\n-----------\n";
		for (uint32_t i = 0u; i < 8u; i++) {
			std::cout << "[(" << formatFloat(act[i * 8u].value) << ", " << formatFloat(act[i * 8u].error) << ')';
			for (uint32_t j = 1u; j < 8u; j++) {
				std::cout << ", (" << formatFloat(act[i * 8u + j].value) << ", " << formatFloat(act[i * 8u + j].error) << ')';
			}
			std::cout << "]\n";
		}
		std::cout << '\n';*/
	}

	float getEnergy() {
		float s = 0.0f;
		for (uint32_t i = 0u; i < 64u; i++) s += act[i].error * act[i].error;
		return s;
	}

	void update(float* input, float* output) {
		if (latch) run(input);
		else train(input, output);
		float s1 = 0.0f;
		for (uint32_t i = 0u; i < 64u; i++) s1 += act[i].error * act[i].error;
		if (s1 > energy) latch = !latch;
		energy = s1;
	}

	void draw() {
		glBindBuffer(GL_ARRAY_BUFFER, nodeColVBO);
		glBufferData(GL_ARRAY_BUFFER, 128u * sizeof(float), act, GL_STATIC_DRAW);
		glBindBuffer(GL_ARRAY_BUFFER, 0u);

		glBindBuffer(GL_ARRAY_BUFFER, weightCol1VBO);
		glBufferData(GL_ARRAY_BUFFER, 896u * sizeof(float), weights, GL_STATIC_DRAW);
		glBindBuffer(GL_ARRAY_BUFFER, 0u);

		glUseProgram(nodeShader);
		glBindVertexArray(nodeVAO);
		glUniform4f(2, box[0], box[1], box[2], box[3]);
		glDrawArrays(GL_POINTS, 0, 64u);

		glUseProgram(weightShader);
		glBindVertexArray(weightVAO);
		glUniform4f(3, box[0], box[1], box[2], box[3]);
		glDrawArrays(GL_POINTS, 0, 896u);
		glUseProgram(0u);
		glBindVertexArray(0u);
	}
};

const float NetworkOld::actPos[128u] = {
	-1.0f, 1.0f,
	-1.0f, 0.714285714286f,
	-1.0f, 0.428571428571f,
	-1.0f, 0.142857142857f,
	-1.0f, -0.142857142857f,
	-1.0f, -0.428571428571f,
	-1.0f, -0.714285714286f,
	-1.0f, -1.0f,

	-0.714285714286f, 1.0f,
	-0.714285714286f, 0.714285714286f,
	-0.714285714286f, 0.428571428571f,
	-0.714285714286f, 0.142857142857f,
	-0.714285714286f, -0.142857142857f,
	-0.714285714286f, -0.428571428571f,
	-0.714285714286f, -0.714285714286f,
	-0.714285714286f, -1.0f,

	-0.428571428571f, 1.0f,
	-0.428571428571f, 0.714285714286f,
	-0.428571428571f, 0.428571428571f,
	-0.428571428571f, 0.142857142857f,
	-0.428571428571f, -0.142857142857f,
	-0.428571428571f, -0.428571428571f,
	-0.428571428571f, -0.714285714286f,
	-0.428571428571f, -1.0f,

	-0.142857142857f, 1.0f,
	-0.142857142857f, 0.714285714286f,
	-0.142857142857f, 0.428571428571f,
	-0.142857142857f, 0.142857142857f,
	-0.142857142857f, -0.142857142857f,
	-0.142857142857f, -0.428571428571f,
	-0.142857142857f, -0.714285714286f,
	-0.142857142857f, -1.0f,

	0.142857142857f, 1.0f,
	0.142857142857f, 0.714285714286f,
	0.142857142857f, 0.428571428571f,
	0.142857142857f, 0.142857142857f,
	0.142857142857f, -0.142857142857f,
	0.142857142857f, -0.428571428571f,
	0.142857142857f, -0.714285714286f,
	0.142857142857f, -1.0f,

	0.428571428571f, 1.0f,
	0.428571428571f, 0.714285714286f,
	0.428571428571f, 0.428571428571f,
	0.428571428571f, 0.142857142857f,
	0.428571428571f, -0.142857142857f,
	0.428571428571f, -0.428571428571f,
	0.428571428571f, -0.714285714286f,
	0.428571428571f, -1.0f,

	0.714285714286f, 1.0f,
	0.714285714286f, 0.714285714286f,
	0.714285714286f, 0.428571428571f,
	0.714285714286f, 0.142857142857f,
	0.714285714286f, -0.142857142857f,
	0.714285714286f, -0.428571428571f,
	0.714285714286f, -0.714285714286f,
	0.714285714286f, -1.0f,

	1.0f, 1.0f,
	1.0f, 0.714285714286f,
	1.0f, 0.428571428571f,
	1.0f, 0.142857142857f,
	1.0f, -0.142857142857f,
	1.0f, -0.428571428571f,
	1.0f, -0.714285714286f,
	1.0f, -1.0f
};

const float NetworkOld::weightPos[3584u] = {
-1.0f, 1.0f, -0.7142857f, 1.0f,
-1.0f, 1.0f, -0.7142857f, 0.7142857f,
-1.0f, 1.0f, -0.7142857f, 0.4285714f,
-1.0f, 1.0f, -0.7142857f, 0.1428571f,
-1.0f, 1.0f, -0.7142857f, -0.1428571f,
-1.0f, 1.0f, -0.7142857f, -0.4285714f,
-1.0f, 1.0f, -0.7142857f, -0.7142857f,
-1.0f, 1.0f, -0.7142857f, -1.0f,

-1.0f, 0.7142857f, -0.7142857f, 1.0f,
-1.0f, 0.7142857f, -0.7142857f, 0.7142857f,
-1.0f, 0.7142857f, -0.7142857f, 0.4285714f,
-1.0f, 0.7142857f, -0.7142857f, 0.1428571f,
-1.0f, 0.7142857f, -0.7142857f, -0.1428571f,
-1.0f, 0.7142857f, -0.7142857f, -0.4285714f,
-1.0f, 0.7142857f, -0.7142857f, -0.7142857f,
-1.0f, 0.7142857f, -0.7142857f, -1.0f,

-1.0f, 0.4285714f, -0.7142857f, 1.0f,
-1.0f, 0.4285714f, -0.7142857f, 0.7142857f,
-1.0f, 0.4285714f, -0.7142857f, 0.4285714f,
-1.0f, 0.4285714f, -0.7142857f, 0.1428571f,
-1.0f, 0.4285714f, -0.7142857f, -0.1428571f,
-1.0f, 0.4285714f, -0.7142857f, -0.4285714f,
-1.0f, 0.4285714f, -0.7142857f, -0.7142857f,
-1.0f, 0.4285714f, -0.7142857f, -1.0f,

-1.0f, 0.1428571f, -0.7142857f, 1.0f,
-1.0f, 0.1428571f, -0.7142857f, 0.7142857f,
-1.0f, 0.1428571f, -0.7142857f, 0.4285714f,
-1.0f, 0.1428571f, -0.7142857f, 0.1428571f,
-1.0f, 0.1428571f, -0.7142857f, -0.1428571f,
-1.0f, 0.1428571f, -0.7142857f, -0.4285714f,
-1.0f, 0.1428571f, -0.7142857f, -0.7142857f,
-1.0f, 0.1428571f, -0.7142857f, -1.0f,

-1.0f, -0.1428571f, -0.7142857f, 1.0f,
-1.0f, -0.1428571f, -0.7142857f, 0.7142857f,
-1.0f, -0.1428571f, -0.7142857f, 0.4285714f,
-1.0f, -0.1428571f, -0.7142857f, 0.1428571f,
-1.0f, -0.1428571f, -0.7142857f, -0.1428571f,
-1.0f, -0.1428571f, -0.7142857f, -0.4285714f,
-1.0f, -0.1428571f, -0.7142857f, -0.7142857f,
-1.0f, -0.1428571f, -0.7142857f, -1.0f,

-1.0f, -0.4285714f, -0.7142857f, 1.0f,
-1.0f, -0.4285714f, -0.7142857f, 0.7142857f,
-1.0f, -0.4285714f, -0.7142857f, 0.4285714f,
-1.0f, -0.4285714f, -0.7142857f, 0.1428571f,
-1.0f, -0.4285714f, -0.7142857f, -0.1428571f,
-1.0f, -0.4285714f, -0.7142857f, -0.4285714f,
-1.0f, -0.4285714f, -0.7142857f, -0.7142857f,
-1.0f, -0.4285714f, -0.7142857f, -1.0f,

-1.0f, -0.7142857f, -0.7142857f, 1.0f,
-1.0f, -0.7142857f, -0.7142857f, 0.7142857f,
-1.0f, -0.7142857f, -0.7142857f, 0.4285714f,
-1.0f, -0.7142857f, -0.7142857f, 0.1428571f,
-1.0f, -0.7142857f, -0.7142857f, -0.1428571f,
-1.0f, -0.7142857f, -0.7142857f, -0.4285714f,
-1.0f, -0.7142857f, -0.7142857f, -0.7142857f,
-1.0f, -0.7142857f, -0.7142857f, -1.0f,

-1.0f, -1.0f, -0.7142857f, 1.0f,
-1.0f, -1.0f, -0.7142857f, 0.7142857f,
-1.0f, -1.0f, -0.7142857f, 0.4285714f,
-1.0f, -1.0f, -0.7142857f, 0.1428571f,
-1.0f, -1.0f, -0.7142857f, -0.1428571f,
-1.0f, -1.0f, -0.7142857f, -0.4285714f,
-1.0f, -1.0f, -0.7142857f, -0.7142857f,
-1.0f, -1.0f, -0.7142857f, -1.0f,

-0.7142857f, 1.0f, -0.4285714f, 1.0f,
-0.7142857f, 1.0f, -0.4285714f, 0.7142857f,
-0.7142857f, 1.0f, -0.4285714f, 0.4285714f,
-0.7142857f, 1.0f, -0.4285714f, 0.1428571f,
-0.7142857f, 1.0f, -0.4285714f, -0.1428571f,
-0.7142857f, 1.0f, -0.4285714f, -0.4285714f,
-0.7142857f, 1.0f, -0.4285714f, -0.7142857f,
-0.7142857f, 1.0f, -0.4285714f, -1.0f,

-0.7142857f, 0.7142857f, -0.4285714f, 1.0f,
-0.7142857f, 0.7142857f, -0.4285714f, 0.7142857f,
-0.7142857f, 0.7142857f, -0.4285714f, 0.4285714f,
-0.7142857f, 0.7142857f, -0.4285714f, 0.1428571f,
-0.7142857f, 0.7142857f, -0.4285714f, -0.1428571f,
-0.7142857f, 0.7142857f, -0.4285714f, -0.4285714f,
-0.7142857f, 0.7142857f, -0.4285714f, -0.7142857f,
-0.7142857f, 0.7142857f, -0.4285714f, -1.0f,

-0.7142857f, 0.4285714f, -0.4285714f, 1.0f,
-0.7142857f, 0.4285714f, -0.4285714f, 0.7142857f,
-0.7142857f, 0.4285714f, -0.4285714f, 0.4285714f,
-0.7142857f, 0.4285714f, -0.4285714f, 0.1428571f,
-0.7142857f, 0.4285714f, -0.4285714f, -0.1428571f,
-0.7142857f, 0.4285714f, -0.4285714f, -0.4285714f,
-0.7142857f, 0.4285714f, -0.4285714f, -0.7142857f,
-0.7142857f, 0.4285714f, -0.4285714f, -1.0f,

-0.7142857f, 0.1428571f, -0.4285714f, 1.0f,
-0.7142857f, 0.1428571f, -0.4285714f, 0.7142857f,
-0.7142857f, 0.1428571f, -0.4285714f, 0.4285714f,
-0.7142857f, 0.1428571f, -0.4285714f, 0.1428571f,
-0.7142857f, 0.1428571f, -0.4285714f, -0.1428571f,
-0.7142857f, 0.1428571f, -0.4285714f, -0.4285714f,
-0.7142857f, 0.1428571f, -0.4285714f, -0.7142857f,
-0.7142857f, 0.1428571f, -0.4285714f, -1.0f,

-0.7142857f, -0.1428571f, -0.4285714f, 1.0f,
-0.7142857f, -0.1428571f, -0.4285714f, 0.7142857f,
-0.7142857f, -0.1428571f, -0.4285714f, 0.4285714f,
-0.7142857f, -0.1428571f, -0.4285714f, 0.1428571f,
-0.7142857f, -0.1428571f, -0.4285714f, -0.1428571f,
-0.7142857f, -0.1428571f, -0.4285714f, -0.4285714f,
-0.7142857f, -0.1428571f, -0.4285714f, -0.7142857f,
-0.7142857f, -0.1428571f, -0.4285714f, -1.0f,

-0.7142857f, -0.4285714f, -0.4285714f, 1.0f,
-0.7142857f, -0.4285714f, -0.4285714f, 0.7142857f,
-0.7142857f, -0.4285714f, -0.4285714f, 0.4285714f,
-0.7142857f, -0.4285714f, -0.4285714f, 0.1428571f,
-0.7142857f, -0.4285714f, -0.4285714f, -0.1428571f,
-0.7142857f, -0.4285714f, -0.4285714f, -0.4285714f,
-0.7142857f, -0.4285714f, -0.4285714f, -0.7142857f,
-0.7142857f, -0.4285714f, -0.4285714f, -1.0f,

-0.7142857f, -0.7142857f, -0.4285714f, 1.0f,
-0.7142857f, -0.7142857f, -0.4285714f, 0.7142857f,
-0.7142857f, -0.7142857f, -0.4285714f, 0.4285714f,
-0.7142857f, -0.7142857f, -0.4285714f, 0.1428571f,
-0.7142857f, -0.7142857f, -0.4285714f, -0.1428571f,
-0.7142857f, -0.7142857f, -0.4285714f, -0.4285714f,
-0.7142857f, -0.7142857f, -0.4285714f, -0.7142857f,
-0.7142857f, -0.7142857f, -0.4285714f, -1.0f,

-0.7142857f, -1.0f, -0.4285714f, 1.0f,
-0.7142857f, -1.0f, -0.4285714f, 0.7142857f,
-0.7142857f, -1.0f, -0.4285714f, 0.4285714f,
-0.7142857f, -1.0f, -0.4285714f, 0.1428571f,
-0.7142857f, -1.0f, -0.4285714f, -0.1428571f,
-0.7142857f, -1.0f, -0.4285714f, -0.4285714f,
-0.7142857f, -1.0f, -0.4285714f, -0.7142857f,
-0.7142857f, -1.0f, -0.4285714f, -1.0f,

-0.4285714f, 1.0f, -0.1428571f, 1.0f,
-0.4285714f, 1.0f, -0.1428571f, 0.7142857f,
-0.4285714f, 1.0f, -0.1428571f, 0.4285714f,
-0.4285714f, 1.0f, -0.1428571f, 0.1428571f,
-0.4285714f, 1.0f, -0.1428571f, -0.1428571f,
-0.4285714f, 1.0f, -0.1428571f, -0.4285714f,
-0.4285714f, 1.0f, -0.1428571f, -0.7142857f,
-0.4285714f, 1.0f, -0.1428571f, -1.0f,

-0.4285714f, 0.7142857f, -0.1428571f, 1.0f,
-0.4285714f, 0.7142857f, -0.1428571f, 0.7142857f,
-0.4285714f, 0.7142857f, -0.1428571f, 0.4285714f,
-0.4285714f, 0.7142857f, -0.1428571f, 0.1428571f,
-0.4285714f, 0.7142857f, -0.1428571f, -0.1428571f,
-0.4285714f, 0.7142857f, -0.1428571f, -0.4285714f,
-0.4285714f, 0.7142857f, -0.1428571f, -0.7142857f,
-0.4285714f, 0.7142857f, -0.1428571f, -1.0f,

-0.4285714f, 0.4285714f, -0.1428571f, 1.0f,
-0.4285714f, 0.4285714f, -0.1428571f, 0.7142857f,
-0.4285714f, 0.4285714f, -0.1428571f, 0.4285714f,
-0.4285714f, 0.4285714f, -0.1428571f, 0.1428571f,
-0.4285714f, 0.4285714f, -0.1428571f, -0.1428571f,
-0.4285714f, 0.4285714f, -0.1428571f, -0.4285714f,
-0.4285714f, 0.4285714f, -0.1428571f, -0.7142857f,
-0.4285714f, 0.4285714f, -0.1428571f, -1.0f,

-0.4285714f, 0.1428571f, -0.1428571f, 1.0f,
-0.4285714f, 0.1428571f, -0.1428571f, 0.7142857f,
-0.4285714f, 0.1428571f, -0.1428571f, 0.4285714f,
-0.4285714f, 0.1428571f, -0.1428571f, 0.1428571f,
-0.4285714f, 0.1428571f, -0.1428571f, -0.1428571f,
-0.4285714f, 0.1428571f, -0.1428571f, -0.4285714f,
-0.4285714f, 0.1428571f, -0.1428571f, -0.7142857f,
-0.4285714f, 0.1428571f, -0.1428571f, -1.0f,

-0.4285714f, -0.1428571f, -0.1428571f, 1.0f,
-0.4285714f, -0.1428571f, -0.1428571f, 0.7142857f,
-0.4285714f, -0.1428571f, -0.1428571f, 0.4285714f,
-0.4285714f, -0.1428571f, -0.1428571f, 0.1428571f,
-0.4285714f, -0.1428571f, -0.1428571f, -0.1428571f,
-0.4285714f, -0.1428571f, -0.1428571f, -0.4285714f,
-0.4285714f, -0.1428571f, -0.1428571f, -0.7142857f,
-0.4285714f, -0.1428571f, -0.1428571f, -1.0f,

-0.4285714f, -0.4285714f, -0.1428571f, 1.0f,
-0.4285714f, -0.4285714f, -0.1428571f, 0.7142857f,
-0.4285714f, -0.4285714f, -0.1428571f, 0.4285714f,
-0.4285714f, -0.4285714f, -0.1428571f, 0.1428571f,
-0.4285714f, -0.4285714f, -0.1428571f, -0.1428571f,
-0.4285714f, -0.4285714f, -0.1428571f, -0.4285714f,
-0.4285714f, -0.4285714f, -0.1428571f, -0.7142857f,
-0.4285714f, -0.4285714f, -0.1428571f, -1.0f,

-0.4285714f, -0.7142857f, -0.1428571f, 1.0f,
-0.4285714f, -0.7142857f, -0.1428571f, 0.7142857f,
-0.4285714f, -0.7142857f, -0.1428571f, 0.4285714f,
-0.4285714f, -0.7142857f, -0.1428571f, 0.1428571f,
-0.4285714f, -0.7142857f, -0.1428571f, -0.1428571f,
-0.4285714f, -0.7142857f, -0.1428571f, -0.4285714f,
-0.4285714f, -0.7142857f, -0.1428571f, -0.7142857f,
-0.4285714f, -0.7142857f, -0.1428571f, -1.0f,

-0.4285714f, -1.0f, -0.1428571f, 1.0f,
-0.4285714f, -1.0f, -0.1428571f, 0.7142857f,
-0.4285714f, -1.0f, -0.1428571f, 0.4285714f,
-0.4285714f, -1.0f, -0.1428571f, 0.1428571f,
-0.4285714f, -1.0f, -0.1428571f, -0.1428571f,
-0.4285714f, -1.0f, -0.1428571f, -0.4285714f,
-0.4285714f, -1.0f, -0.1428571f, -0.7142857f,
-0.4285714f, -1.0f, -0.1428571f, -1.0f,

-0.1428571f, 1.0f, 0.1428571f, 1.0f,
-0.1428571f, 1.0f, 0.1428571f, 0.7142857f,
-0.1428571f, 1.0f, 0.1428571f, 0.4285714f,
-0.1428571f, 1.0f, 0.1428571f, 0.1428571f,
-0.1428571f, 1.0f, 0.1428571f, -0.1428571f,
-0.1428571f, 1.0f, 0.1428571f, -0.4285714f,
-0.1428571f, 1.0f, 0.1428571f, -0.7142857f,
-0.1428571f, 1.0f, 0.1428571f, -1.0f,

-0.1428571f, 0.7142857f, 0.1428571f, 1.0f,
-0.1428571f, 0.7142857f, 0.1428571f, 0.7142857f,
-0.1428571f, 0.7142857f, 0.1428571f, 0.4285714f,
-0.1428571f, 0.7142857f, 0.1428571f, 0.1428571f,
-0.1428571f, 0.7142857f, 0.1428571f, -0.1428571f,
-0.1428571f, 0.7142857f, 0.1428571f, -0.4285714f,
-0.1428571f, 0.7142857f, 0.1428571f, -0.7142857f,
-0.1428571f, 0.7142857f, 0.1428571f, -1.0f,

-0.1428571f, 0.4285714f, 0.1428571f, 1.0f,
-0.1428571f, 0.4285714f, 0.1428571f, 0.7142857f,
-0.1428571f, 0.4285714f, 0.1428571f, 0.4285714f,
-0.1428571f, 0.4285714f, 0.1428571f, 0.1428571f,
-0.1428571f, 0.4285714f, 0.1428571f, -0.1428571f,
-0.1428571f, 0.4285714f, 0.1428571f, -0.4285714f,
-0.1428571f, 0.4285714f, 0.1428571f, -0.7142857f,
-0.1428571f, 0.4285714f, 0.1428571f, -1.0f,

-0.1428571f, 0.1428571f, 0.1428571f, 1.0f,
-0.1428571f, 0.1428571f, 0.1428571f, 0.7142857f,
-0.1428571f, 0.1428571f, 0.1428571f, 0.4285714f,
-0.1428571f, 0.1428571f, 0.1428571f, 0.1428571f,
-0.1428571f, 0.1428571f, 0.1428571f, -0.1428571f,
-0.1428571f, 0.1428571f, 0.1428571f, -0.4285714f,
-0.1428571f, 0.1428571f, 0.1428571f, -0.7142857f,
-0.1428571f, 0.1428571f, 0.1428571f, -1.0f,

-0.1428571f, -0.1428571f, 0.1428571f, 1.0f,
-0.1428571f, -0.1428571f, 0.1428571f, 0.7142857f,
-0.1428571f, -0.1428571f, 0.1428571f, 0.4285714f,
-0.1428571f, -0.1428571f, 0.1428571f, 0.1428571f,
-0.1428571f, -0.1428571f, 0.1428571f, -0.1428571f,
-0.1428571f, -0.1428571f, 0.1428571f, -0.4285714f,
-0.1428571f, -0.1428571f, 0.1428571f, -0.7142857f,
-0.1428571f, -0.1428571f, 0.1428571f, -1.0f,

-0.1428571f, -0.4285714f, 0.1428571f, 1.0f,
-0.1428571f, -0.4285714f, 0.1428571f, 0.7142857f,
-0.1428571f, -0.4285714f, 0.1428571f, 0.4285714f,
-0.1428571f, -0.4285714f, 0.1428571f, 0.1428571f,
-0.1428571f, -0.4285714f, 0.1428571f, -0.1428571f,
-0.1428571f, -0.4285714f, 0.1428571f, -0.4285714f,
-0.1428571f, -0.4285714f, 0.1428571f, -0.7142857f,
-0.1428571f, -0.4285714f, 0.1428571f, -1.0f,

-0.1428571f, -0.7142857f, 0.1428571f, 1.0f,
-0.1428571f, -0.7142857f, 0.1428571f, 0.7142857f,
-0.1428571f, -0.7142857f, 0.1428571f, 0.4285714f,
-0.1428571f, -0.7142857f, 0.1428571f, 0.1428571f,
-0.1428571f, -0.7142857f, 0.1428571f, -0.1428571f,
-0.1428571f, -0.7142857f, 0.1428571f, -0.4285714f,
-0.1428571f, -0.7142857f, 0.1428571f, -0.7142857f,
-0.1428571f, -0.7142857f, 0.1428571f, -1.0f,

-0.1428571f, -1.0f, 0.1428571f, 1.0f,
-0.1428571f, -1.0f, 0.1428571f, 0.7142857f,
-0.1428571f, -1.0f, 0.1428571f, 0.4285714f,
-0.1428571f, -1.0f, 0.1428571f, 0.1428571f,
-0.1428571f, -1.0f, 0.1428571f, -0.1428571f,
-0.1428571f, -1.0f, 0.1428571f, -0.4285714f,
-0.1428571f, -1.0f, 0.1428571f, -0.7142857f,
-0.1428571f, -1.0f, 0.1428571f, -1.0f,

0.1428571f, 1.0f, 0.4285714f, 1.0f,
0.1428571f, 1.0f, 0.4285714f, 0.7142857f,
0.1428571f, 1.0f, 0.4285714f, 0.4285714f,
0.1428571f, 1.0f, 0.4285714f, 0.1428571f,
0.1428571f, 1.0f, 0.4285714f, -0.1428571f,
0.1428571f, 1.0f, 0.4285714f, -0.4285714f,
0.1428571f, 1.0f, 0.4285714f, -0.7142857f,
0.1428571f, 1.0f, 0.4285714f, -1.0f,

0.1428571f, 0.7142857f, 0.4285714f, 1.0f,
0.1428571f, 0.7142857f, 0.4285714f, 0.7142857f,
0.1428571f, 0.7142857f, 0.4285714f, 0.4285714f,
0.1428571f, 0.7142857f, 0.4285714f, 0.1428571f,
0.1428571f, 0.7142857f, 0.4285714f, -0.1428571f,
0.1428571f, 0.7142857f, 0.4285714f, -0.4285714f,
0.1428571f, 0.7142857f, 0.4285714f, -0.7142857f,
0.1428571f, 0.7142857f, 0.4285714f, -1.0f,

0.1428571f, 0.4285714f, 0.4285714f, 1.0f,
0.1428571f, 0.4285714f, 0.4285714f, 0.7142857f,
0.1428571f, 0.4285714f, 0.4285714f, 0.4285714f,
0.1428571f, 0.4285714f, 0.4285714f, 0.1428571f,
0.1428571f, 0.4285714f, 0.4285714f, -0.1428571f,
0.1428571f, 0.4285714f, 0.4285714f, -0.4285714f,
0.1428571f, 0.4285714f, 0.4285714f, -0.7142857f,
0.1428571f, 0.4285714f, 0.4285714f, -1.0f,

0.1428571f, 0.1428571f, 0.4285714f, 1.0f,
0.1428571f, 0.1428571f, 0.4285714f, 0.7142857f,
0.1428571f, 0.1428571f, 0.4285714f, 0.4285714f,
0.1428571f, 0.1428571f, 0.4285714f, 0.1428571f,
0.1428571f, 0.1428571f, 0.4285714f, -0.1428571f,
0.1428571f, 0.1428571f, 0.4285714f, -0.4285714f,
0.1428571f, 0.1428571f, 0.4285714f, -0.7142857f,
0.1428571f, 0.1428571f, 0.4285714f, -1.0f,

0.1428571f, -0.1428571f, 0.4285714f, 1.0f,
0.1428571f, -0.1428571f, 0.4285714f, 0.7142857f,
0.1428571f, -0.1428571f, 0.4285714f, 0.4285714f,
0.1428571f, -0.1428571f, 0.4285714f, 0.1428571f,
0.1428571f, -0.1428571f, 0.4285714f, -0.1428571f,
0.1428571f, -0.1428571f, 0.4285714f, -0.4285714f,
0.1428571f, -0.1428571f, 0.4285714f, -0.7142857f,
0.1428571f, -0.1428571f, 0.4285714f, -1.0f,

0.1428571f, -0.4285714f, 0.4285714f, 1.0f,
0.1428571f, -0.4285714f, 0.4285714f, 0.7142857f,
0.1428571f, -0.4285714f, 0.4285714f, 0.4285714f,
0.1428571f, -0.4285714f, 0.4285714f, 0.1428571f,
0.1428571f, -0.4285714f, 0.4285714f, -0.1428571f,
0.1428571f, -0.4285714f, 0.4285714f, -0.4285714f,
0.1428571f, -0.4285714f, 0.4285714f, -0.7142857f,
0.1428571f, -0.4285714f, 0.4285714f, -1.0f,

0.1428571f, -0.7142857f, 0.4285714f, 1.0f,
0.1428571f, -0.7142857f, 0.4285714f, 0.7142857f,
0.1428571f, -0.7142857f, 0.4285714f, 0.4285714f,
0.1428571f, -0.7142857f, 0.4285714f, 0.1428571f,
0.1428571f, -0.7142857f, 0.4285714f, -0.1428571f,
0.1428571f, -0.7142857f, 0.4285714f, -0.4285714f,
0.1428571f, -0.7142857f, 0.4285714f, -0.7142857f,
0.1428571f, -0.7142857f, 0.4285714f, -1.0f,

0.1428571f, -1.0f, 0.4285714f, 1.0f,
0.1428571f, -1.0f, 0.4285714f, 0.7142857f,
0.1428571f, -1.0f, 0.4285714f, 0.4285714f,
0.1428571f, -1.0f, 0.4285714f, 0.1428571f,
0.1428571f, -1.0f, 0.4285714f, -0.1428571f,
0.1428571f, -1.0f, 0.4285714f, -0.4285714f,
0.1428571f, -1.0f, 0.4285714f, -0.7142857f,
0.1428571f, -1.0f, 0.4285714f, -1.0f,

0.4285714f, 1.0f, 0.7142857f, 1.0f,
0.4285714f, 1.0f, 0.7142857f, 0.7142857f,
0.4285714f, 1.0f, 0.7142857f, 0.4285714f,
0.4285714f, 1.0f, 0.7142857f, 0.1428571f,
0.4285714f, 1.0f, 0.7142857f, -0.1428571f,
0.4285714f, 1.0f, 0.7142857f, -0.4285714f,
0.4285714f, 1.0f, 0.7142857f, -0.7142857f,
0.4285714f, 1.0f, 0.7142857f, -1.0f,

0.4285714f, 0.7142857f, 0.7142857f, 1.0f,
0.4285714f, 0.7142857f, 0.7142857f, 0.7142857f,
0.4285714f, 0.7142857f, 0.7142857f, 0.4285714f,
0.4285714f, 0.7142857f, 0.7142857f, 0.1428571f,
0.4285714f, 0.7142857f, 0.7142857f, -0.1428571f,
0.4285714f, 0.7142857f, 0.7142857f, -0.4285714f,
0.4285714f, 0.7142857f, 0.7142857f, -0.7142857f,
0.4285714f, 0.7142857f, 0.7142857f, -1.0f,

0.4285714f, 0.4285714f, 0.7142857f, 1.0f,
0.4285714f, 0.4285714f, 0.7142857f, 0.7142857f,
0.4285714f, 0.4285714f, 0.7142857f, 0.4285714f,
0.4285714f, 0.4285714f, 0.7142857f, 0.1428571f,
0.4285714f, 0.4285714f, 0.7142857f, -0.1428571f,
0.4285714f, 0.4285714f, 0.7142857f, -0.4285714f,
0.4285714f, 0.4285714f, 0.7142857f, -0.7142857f,
0.4285714f, 0.4285714f, 0.7142857f, -1.0f,

0.4285714f, 0.1428571f, 0.7142857f, 1.0f,
0.4285714f, 0.1428571f, 0.7142857f, 0.7142857f,
0.4285714f, 0.1428571f, 0.7142857f, 0.4285714f,
0.4285714f, 0.1428571f, 0.7142857f, 0.1428571f,
0.4285714f, 0.1428571f, 0.7142857f, -0.1428571f,
0.4285714f, 0.1428571f, 0.7142857f, -0.4285714f,
0.4285714f, 0.1428571f, 0.7142857f, -0.7142857f,
0.4285714f, 0.1428571f, 0.7142857f, -1.0f,

0.4285714f, -0.1428571f, 0.7142857f, 1.0f,
0.4285714f, -0.1428571f, 0.7142857f, 0.7142857f,
0.4285714f, -0.1428571f, 0.7142857f, 0.4285714f,
0.4285714f, -0.1428571f, 0.7142857f, 0.1428571f,
0.4285714f, -0.1428571f, 0.7142857f, -0.1428571f,
0.4285714f, -0.1428571f, 0.7142857f, -0.4285714f,
0.4285714f, -0.1428571f, 0.7142857f, -0.7142857f,
0.4285714f, -0.1428571f, 0.7142857f, -1.0f,

0.4285714f, -0.4285714f, 0.7142857f, 1.0f,
0.4285714f, -0.4285714f, 0.7142857f, 0.7142857f,
0.4285714f, -0.4285714f, 0.7142857f, 0.4285714f,
0.4285714f, -0.4285714f, 0.7142857f, 0.1428571f,
0.4285714f, -0.4285714f, 0.7142857f, -0.1428571f,
0.4285714f, -0.4285714f, 0.7142857f, -0.4285714f,
0.4285714f, -0.4285714f, 0.7142857f, -0.7142857f,
0.4285714f, -0.4285714f, 0.7142857f, -1.0f,

0.4285714f, -0.7142857f, 0.7142857f, 1.0f,
0.4285714f, -0.7142857f, 0.7142857f, 0.7142857f,
0.4285714f, -0.7142857f, 0.7142857f, 0.4285714f,
0.4285714f, -0.7142857f, 0.7142857f, 0.1428571f,
0.4285714f, -0.7142857f, 0.7142857f, -0.1428571f,
0.4285714f, -0.7142857f, 0.7142857f, -0.4285714f,
0.4285714f, -0.7142857f, 0.7142857f, -0.7142857f,
0.4285714f, -0.7142857f, 0.7142857f, -1.0f,

0.4285714f, -1.0f, 0.7142857f, 1.0f,
0.4285714f, -1.0f, 0.7142857f, 0.7142857f,
0.4285714f, -1.0f, 0.7142857f, 0.4285714f,
0.4285714f, -1.0f, 0.7142857f, 0.1428571f,
0.4285714f, -1.0f, 0.7142857f, -0.1428571f,
0.4285714f, -1.0f, 0.7142857f, -0.4285714f,
0.4285714f, -1.0f, 0.7142857f, -0.7142857f,
0.4285714f, -1.0f, 0.7142857f, -1.0f,

0.7142857f, 1.0f, 1.0f, 1.0f,
0.7142857f, 1.0f, 1.0f, 0.7142857f,
0.7142857f, 1.0f, 1.0f, 0.4285714f,
0.7142857f, 1.0f, 1.0f, 0.1428571f,
0.7142857f, 1.0f, 1.0f, -0.1428571f,
0.7142857f, 1.0f, 1.0f, -0.4285714f,
0.7142857f, 1.0f, 1.0f, -0.7142857f,
0.7142857f, 1.0f, 1.0f, -1.0f,

0.7142857f, 0.7142857f, 1.0f, 1.0f,
0.7142857f, 0.7142857f, 1.0f, 0.7142857f,
0.7142857f, 0.7142857f, 1.0f, 0.4285714f,
0.7142857f, 0.7142857f, 1.0f, 0.1428571f,
0.7142857f, 0.7142857f, 1.0f, -0.1428571f,
0.7142857f, 0.7142857f, 1.0f, -0.4285714f,
0.7142857f, 0.7142857f, 1.0f, -0.7142857f,
0.7142857f, 0.7142857f, 1.0f, -1.0f,

0.7142857f, 0.4285714f, 1.0f, 1.0f,
0.7142857f, 0.4285714f, 1.0f, 0.7142857f,
0.7142857f, 0.4285714f, 1.0f, 0.4285714f,
0.7142857f, 0.4285714f, 1.0f, 0.1428571f,
0.7142857f, 0.4285714f, 1.0f, -0.1428571f,
0.7142857f, 0.4285714f, 1.0f, -0.4285714f,
0.7142857f, 0.4285714f, 1.0f, -0.7142857f,
0.7142857f, 0.4285714f, 1.0f, -1.0f,

0.7142857f, 0.1428571f, 1.0f, 1.0f,
0.7142857f, 0.1428571f, 1.0f, 0.7142857f,
0.7142857f, 0.1428571f, 1.0f, 0.4285714f,
0.7142857f, 0.1428571f, 1.0f, 0.1428571f,
0.7142857f, 0.1428571f, 1.0f, -0.1428571f,
0.7142857f, 0.1428571f, 1.0f, -0.4285714f,
0.7142857f, 0.1428571f, 1.0f, -0.7142857f,
0.7142857f, 0.1428571f, 1.0f, -1.0f,

0.7142857f, -0.1428571f, 1.0f, 1.0f,
0.7142857f, -0.1428571f, 1.0f, 0.7142857f,
0.7142857f, -0.1428571f, 1.0f, 0.4285714f,
0.7142857f, -0.1428571f, 1.0f, 0.1428571f,
0.7142857f, -0.1428571f, 1.0f, -0.1428571f,
0.7142857f, -0.1428571f, 1.0f, -0.4285714f,
0.7142857f, -0.1428571f, 1.0f, -0.7142857f,
0.7142857f, -0.1428571f, 1.0f, -1.0f,

0.7142857f, -0.4285714f, 1.0f, 1.0f,
0.7142857f, -0.4285714f, 1.0f, 0.7142857f,
0.7142857f, -0.4285714f, 1.0f, 0.4285714f,
0.7142857f, -0.4285714f, 1.0f, 0.1428571f,
0.7142857f, -0.4285714f, 1.0f, -0.1428571f,
0.7142857f, -0.4285714f, 1.0f, -0.4285714f,
0.7142857f, -0.4285714f, 1.0f, -0.7142857f,
0.7142857f, -0.4285714f, 1.0f, -1.0f,

0.7142857f, -0.7142857f, 1.0f, 1.0f,
0.7142857f, -0.7142857f, 1.0f, 0.7142857f,
0.7142857f, -0.7142857f, 1.0f, 0.4285714f,
0.7142857f, -0.7142857f, 1.0f, 0.1428571f,
0.7142857f, -0.7142857f, 1.0f, -0.1428571f,
0.7142857f, -0.7142857f, 1.0f, -0.4285714f,
0.7142857f, -0.7142857f, 1.0f, -0.7142857f,
0.7142857f, -0.7142857f, 1.0f, -1.0f,

0.7142857f, -1.0f, 1.0f, 1.0f,
0.7142857f, -1.0f, 1.0f, 0.7142857f,
0.7142857f, -1.0f, 1.0f, 0.4285714f,
0.7142857f, -1.0f, 1.0f, 0.1428571f,
0.7142857f, -1.0f, 1.0f, -0.1428571f,
0.7142857f, -1.0f, 1.0f, -0.4285714f,
0.7142857f, -1.0f, 1.0f, -0.7142857f,
0.7142857f, -1.0f, 1.0f, -1.0f,



-1.0f, 1.0f, -0.7142857f, 1.0f,
-1.0f, 1.0f, -0.7142857f, 0.7142857f,
-1.0f, 1.0f, -0.7142857f, 0.4285714f,
-1.0f, 1.0f, -0.7142857f, 0.1428571f,
-1.0f, 1.0f, -0.7142857f, -0.1428571f,
-1.0f, 1.0f, -0.7142857f, -0.4285714f,
-1.0f, 1.0f, -0.7142857f, -0.7142857f,
-1.0f, 1.0f, -0.7142857f, -1.0f,

-1.0f, 0.7142857f, -0.7142857f, 1.0f,
-1.0f, 0.7142857f, -0.7142857f, 0.7142857f,
-1.0f, 0.7142857f, -0.7142857f, 0.4285714f,
-1.0f, 0.7142857f, -0.7142857f, 0.1428571f,
-1.0f, 0.7142857f, -0.7142857f, -0.1428571f,
-1.0f, 0.7142857f, -0.7142857f, -0.4285714f,
-1.0f, 0.7142857f, -0.7142857f, -0.7142857f,
-1.0f, 0.7142857f, -0.7142857f, -1.0f,

-1.0f, 0.4285714f, -0.7142857f, 1.0f,
-1.0f, 0.4285714f, -0.7142857f, 0.7142857f,
-1.0f, 0.4285714f, -0.7142857f, 0.4285714f,
-1.0f, 0.4285714f, -0.7142857f, 0.1428571f,
-1.0f, 0.4285714f, -0.7142857f, -0.1428571f,
-1.0f, 0.4285714f, -0.7142857f, -0.4285714f,
-1.0f, 0.4285714f, -0.7142857f, -0.7142857f,
-1.0f, 0.4285714f, -0.7142857f, -1.0f,

-1.0f, 0.1428571f, -0.7142857f, 1.0f,
-1.0f, 0.1428571f, -0.7142857f, 0.7142857f,
-1.0f, 0.1428571f, -0.7142857f, 0.4285714f,
-1.0f, 0.1428571f, -0.7142857f, 0.1428571f,
-1.0f, 0.1428571f, -0.7142857f, -0.1428571f,
-1.0f, 0.1428571f, -0.7142857f, -0.4285714f,
-1.0f, 0.1428571f, -0.7142857f, -0.7142857f,
-1.0f, 0.1428571f, -0.7142857f, -1.0f,

-1.0f, -0.1428571f, -0.7142857f, 1.0f,
-1.0f, -0.1428571f, -0.7142857f, 0.7142857f,
-1.0f, -0.1428571f, -0.7142857f, 0.4285714f,
-1.0f, -0.1428571f, -0.7142857f, 0.1428571f,
-1.0f, -0.1428571f, -0.7142857f, -0.1428571f,
-1.0f, -0.1428571f, -0.7142857f, -0.4285714f,
-1.0f, -0.1428571f, -0.7142857f, -0.7142857f,
-1.0f, -0.1428571f, -0.7142857f, -1.0f,

-1.0f, -0.4285714f, -0.7142857f, 1.0f,
-1.0f, -0.4285714f, -0.7142857f, 0.7142857f,
-1.0f, -0.4285714f, -0.7142857f, 0.4285714f,
-1.0f, -0.4285714f, -0.7142857f, 0.1428571f,
-1.0f, -0.4285714f, -0.7142857f, -0.1428571f,
-1.0f, -0.4285714f, -0.7142857f, -0.4285714f,
-1.0f, -0.4285714f, -0.7142857f, -0.7142857f,
-1.0f, -0.4285714f, -0.7142857f, -1.0f,

-1.0f, -0.7142857f, -0.7142857f, 1.0f,
-1.0f, -0.7142857f, -0.7142857f, 0.7142857f,
-1.0f, -0.7142857f, -0.7142857f, 0.4285714f,
-1.0f, -0.7142857f, -0.7142857f, 0.1428571f,
-1.0f, -0.7142857f, -0.7142857f, -0.1428571f,
-1.0f, -0.7142857f, -0.7142857f, -0.4285714f,
-1.0f, -0.7142857f, -0.7142857f, -0.7142857f,
-1.0f, -0.7142857f, -0.7142857f, -1.0f,

-1.0f, -1.0f, -0.7142857f, 1.0f,
-1.0f, -1.0f, -0.7142857f, 0.7142857f,
-1.0f, -1.0f, -0.7142857f, 0.4285714f,
-1.0f, -1.0f, -0.7142857f, 0.1428571f,
-1.0f, -1.0f, -0.7142857f, -0.1428571f,
-1.0f, -1.0f, -0.7142857f, -0.4285714f,
-1.0f, -1.0f, -0.7142857f, -0.7142857f,
-1.0f, -1.0f, -0.7142857f, -1.0f,

-0.7142857f, 1.0f, -0.4285714f, 1.0f,
-0.7142857f, 1.0f, -0.4285714f, 0.7142857f,
-0.7142857f, 1.0f, -0.4285714f, 0.4285714f,
-0.7142857f, 1.0f, -0.4285714f, 0.1428571f,
-0.7142857f, 1.0f, -0.4285714f, -0.1428571f,
-0.7142857f, 1.0f, -0.4285714f, -0.4285714f,
-0.7142857f, 1.0f, -0.4285714f, -0.7142857f,
-0.7142857f, 1.0f, -0.4285714f, -1.0f,

-0.7142857f, 0.7142857f, -0.4285714f, 1.0f,
-0.7142857f, 0.7142857f, -0.4285714f, 0.7142857f,
-0.7142857f, 0.7142857f, -0.4285714f, 0.4285714f,
-0.7142857f, 0.7142857f, -0.4285714f, 0.1428571f,
-0.7142857f, 0.7142857f, -0.4285714f, -0.1428571f,
-0.7142857f, 0.7142857f, -0.4285714f, -0.4285714f,
-0.7142857f, 0.7142857f, -0.4285714f, -0.7142857f,
-0.7142857f, 0.7142857f, -0.4285714f, -1.0f,

-0.7142857f, 0.4285714f, -0.4285714f, 1.0f,
-0.7142857f, 0.4285714f, -0.4285714f, 0.7142857f,
-0.7142857f, 0.4285714f, -0.4285714f, 0.4285714f,
-0.7142857f, 0.4285714f, -0.4285714f, 0.1428571f,
-0.7142857f, 0.4285714f, -0.4285714f, -0.1428571f,
-0.7142857f, 0.4285714f, -0.4285714f, -0.4285714f,
-0.7142857f, 0.4285714f, -0.4285714f, -0.7142857f,
-0.7142857f, 0.4285714f, -0.4285714f, -1.0f,

-0.7142857f, 0.1428571f, -0.4285714f, 1.0f,
-0.7142857f, 0.1428571f, -0.4285714f, 0.7142857f,
-0.7142857f, 0.1428571f, -0.4285714f, 0.4285714f,
-0.7142857f, 0.1428571f, -0.4285714f, 0.1428571f,
-0.7142857f, 0.1428571f, -0.4285714f, -0.1428571f,
-0.7142857f, 0.1428571f, -0.4285714f, -0.4285714f,
-0.7142857f, 0.1428571f, -0.4285714f, -0.7142857f,
-0.7142857f, 0.1428571f, -0.4285714f, -1.0f,

-0.7142857f, -0.1428571f, -0.4285714f, 1.0f,
-0.7142857f, -0.1428571f, -0.4285714f, 0.7142857f,
-0.7142857f, -0.1428571f, -0.4285714f, 0.4285714f,
-0.7142857f, -0.1428571f, -0.4285714f, 0.1428571f,
-0.7142857f, -0.1428571f, -0.4285714f, -0.1428571f,
-0.7142857f, -0.1428571f, -0.4285714f, -0.4285714f,
-0.7142857f, -0.1428571f, -0.4285714f, -0.7142857f,
-0.7142857f, -0.1428571f, -0.4285714f, -1.0f,

-0.7142857f, -0.4285714f, -0.4285714f, 1.0f,
-0.7142857f, -0.4285714f, -0.4285714f, 0.7142857f,
-0.7142857f, -0.4285714f, -0.4285714f, 0.4285714f,
-0.7142857f, -0.4285714f, -0.4285714f, 0.1428571f,
-0.7142857f, -0.4285714f, -0.4285714f, -0.1428571f,
-0.7142857f, -0.4285714f, -0.4285714f, -0.4285714f,
-0.7142857f, -0.4285714f, -0.4285714f, -0.7142857f,
-0.7142857f, -0.4285714f, -0.4285714f, -1.0f,

-0.7142857f, -0.7142857f, -0.4285714f, 1.0f,
-0.7142857f, -0.7142857f, -0.4285714f, 0.7142857f,
-0.7142857f, -0.7142857f, -0.4285714f, 0.4285714f,
-0.7142857f, -0.7142857f, -0.4285714f, 0.1428571f,
-0.7142857f, -0.7142857f, -0.4285714f, -0.1428571f,
-0.7142857f, -0.7142857f, -0.4285714f, -0.4285714f,
-0.7142857f, -0.7142857f, -0.4285714f, -0.7142857f,
-0.7142857f, -0.7142857f, -0.4285714f, -1.0f,

-0.7142857f, -1.0f, -0.4285714f, 1.0f,
-0.7142857f, -1.0f, -0.4285714f, 0.7142857f,
-0.7142857f, -1.0f, -0.4285714f, 0.4285714f,
-0.7142857f, -1.0f, -0.4285714f, 0.1428571f,
-0.7142857f, -1.0f, -0.4285714f, -0.1428571f,
-0.7142857f, -1.0f, -0.4285714f, -0.4285714f,
-0.7142857f, -1.0f, -0.4285714f, -0.7142857f,
-0.7142857f, -1.0f, -0.4285714f, -1.0f,

-0.4285714f, 1.0f, -0.1428571f, 1.0f,
-0.4285714f, 1.0f, -0.1428571f, 0.7142857f,
-0.4285714f, 1.0f, -0.1428571f, 0.4285714f,
-0.4285714f, 1.0f, -0.1428571f, 0.1428571f,
-0.4285714f, 1.0f, -0.1428571f, -0.1428571f,
-0.4285714f, 1.0f, -0.1428571f, -0.4285714f,
-0.4285714f, 1.0f, -0.1428571f, -0.7142857f,
-0.4285714f, 1.0f, -0.1428571f, -1.0f,

-0.4285714f, 0.7142857f, -0.1428571f, 1.0f,
-0.4285714f, 0.7142857f, -0.1428571f, 0.7142857f,
-0.4285714f, 0.7142857f, -0.1428571f, 0.4285714f,
-0.4285714f, 0.7142857f, -0.1428571f, 0.1428571f,
-0.4285714f, 0.7142857f, -0.1428571f, -0.1428571f,
-0.4285714f, 0.7142857f, -0.1428571f, -0.4285714f,
-0.4285714f, 0.7142857f, -0.1428571f, -0.7142857f,
-0.4285714f, 0.7142857f, -0.1428571f, -1.0f,

-0.4285714f, 0.4285714f, -0.1428571f, 1.0f,
-0.4285714f, 0.4285714f, -0.1428571f, 0.7142857f,
-0.4285714f, 0.4285714f, -0.1428571f, 0.4285714f,
-0.4285714f, 0.4285714f, -0.1428571f, 0.1428571f,
-0.4285714f, 0.4285714f, -0.1428571f, -0.1428571f,
-0.4285714f, 0.4285714f, -0.1428571f, -0.4285714f,
-0.4285714f, 0.4285714f, -0.1428571f, -0.7142857f,
-0.4285714f, 0.4285714f, -0.1428571f, -1.0f,

-0.4285714f, 0.1428571f, -0.1428571f, 1.0f,
-0.4285714f, 0.1428571f, -0.1428571f, 0.7142857f,
-0.4285714f, 0.1428571f, -0.1428571f, 0.4285714f,
-0.4285714f, 0.1428571f, -0.1428571f, 0.1428571f,
-0.4285714f, 0.1428571f, -0.1428571f, -0.1428571f,
-0.4285714f, 0.1428571f, -0.1428571f, -0.4285714f,
-0.4285714f, 0.1428571f, -0.1428571f, -0.7142857f,
-0.4285714f, 0.1428571f, -0.1428571f, -1.0f,

-0.4285714f, -0.1428571f, -0.1428571f, 1.0f,
-0.4285714f, -0.1428571f, -0.1428571f, 0.7142857f,
-0.4285714f, -0.1428571f, -0.1428571f, 0.4285714f,
-0.4285714f, -0.1428571f, -0.1428571f, 0.1428571f,
-0.4285714f, -0.1428571f, -0.1428571f, -0.1428571f,
-0.4285714f, -0.1428571f, -0.1428571f, -0.4285714f,
-0.4285714f, -0.1428571f, -0.1428571f, -0.7142857f,
-0.4285714f, -0.1428571f, -0.1428571f, -1.0f,

-0.4285714f, -0.4285714f, -0.1428571f, 1.0f,
-0.4285714f, -0.4285714f, -0.1428571f, 0.7142857f,
-0.4285714f, -0.4285714f, -0.1428571f, 0.4285714f,
-0.4285714f, -0.4285714f, -0.1428571f, 0.1428571f,
-0.4285714f, -0.4285714f, -0.1428571f, -0.1428571f,
-0.4285714f, -0.4285714f, -0.1428571f, -0.4285714f,
-0.4285714f, -0.4285714f, -0.1428571f, -0.7142857f,
-0.4285714f, -0.4285714f, -0.1428571f, -1.0f,

-0.4285714f, -0.7142857f, -0.1428571f, 1.0f,
-0.4285714f, -0.7142857f, -0.1428571f, 0.7142857f,
-0.4285714f, -0.7142857f, -0.1428571f, 0.4285714f,
-0.4285714f, -0.7142857f, -0.1428571f, 0.1428571f,
-0.4285714f, -0.7142857f, -0.1428571f, -0.1428571f,
-0.4285714f, -0.7142857f, -0.1428571f, -0.4285714f,
-0.4285714f, -0.7142857f, -0.1428571f, -0.7142857f,
-0.4285714f, -0.7142857f, -0.1428571f, -1.0f,

-0.4285714f, -1.0f, -0.1428571f, 1.0f,
-0.4285714f, -1.0f, -0.1428571f, 0.7142857f,
-0.4285714f, -1.0f, -0.1428571f, 0.4285714f,
-0.4285714f, -1.0f, -0.1428571f, 0.1428571f,
-0.4285714f, -1.0f, -0.1428571f, -0.1428571f,
-0.4285714f, -1.0f, -0.1428571f, -0.4285714f,
-0.4285714f, -1.0f, -0.1428571f, -0.7142857f,
-0.4285714f, -1.0f, -0.1428571f, -1.0f,

-0.1428571f, 1.0f, 0.1428571f, 1.0f,
-0.1428571f, 1.0f, 0.1428571f, 0.7142857f,
-0.1428571f, 1.0f, 0.1428571f, 0.4285714f,
-0.1428571f, 1.0f, 0.1428571f, 0.1428571f,
-0.1428571f, 1.0f, 0.1428571f, -0.1428571f,
-0.1428571f, 1.0f, 0.1428571f, -0.4285714f,
-0.1428571f, 1.0f, 0.1428571f, -0.7142857f,
-0.1428571f, 1.0f, 0.1428571f, -1.0f,

-0.1428571f, 0.7142857f, 0.1428571f, 1.0f,
-0.1428571f, 0.7142857f, 0.1428571f, 0.7142857f,
-0.1428571f, 0.7142857f, 0.1428571f, 0.4285714f,
-0.1428571f, 0.7142857f, 0.1428571f, 0.1428571f,
-0.1428571f, 0.7142857f, 0.1428571f, -0.1428571f,
-0.1428571f, 0.7142857f, 0.1428571f, -0.4285714f,
-0.1428571f, 0.7142857f, 0.1428571f, -0.7142857f,
-0.1428571f, 0.7142857f, 0.1428571f, -1.0f,

-0.1428571f, 0.4285714f, 0.1428571f, 1.0f,
-0.1428571f, 0.4285714f, 0.1428571f, 0.7142857f,
-0.1428571f, 0.4285714f, 0.1428571f, 0.4285714f,
-0.1428571f, 0.4285714f, 0.1428571f, 0.1428571f,
-0.1428571f, 0.4285714f, 0.1428571f, -0.1428571f,
-0.1428571f, 0.4285714f, 0.1428571f, -0.4285714f,
-0.1428571f, 0.4285714f, 0.1428571f, -0.7142857f,
-0.1428571f, 0.4285714f, 0.1428571f, -1.0f,

-0.1428571f, 0.1428571f, 0.1428571f, 1.0f,
-0.1428571f, 0.1428571f, 0.1428571f, 0.7142857f,
-0.1428571f, 0.1428571f, 0.1428571f, 0.4285714f,
-0.1428571f, 0.1428571f, 0.1428571f, 0.1428571f,
-0.1428571f, 0.1428571f, 0.1428571f, -0.1428571f,
-0.1428571f, 0.1428571f, 0.1428571f, -0.4285714f,
-0.1428571f, 0.1428571f, 0.1428571f, -0.7142857f,
-0.1428571f, 0.1428571f, 0.1428571f, -1.0f,

-0.1428571f, -0.1428571f, 0.1428571f, 1.0f,
-0.1428571f, -0.1428571f, 0.1428571f, 0.7142857f,
-0.1428571f, -0.1428571f, 0.1428571f, 0.4285714f,
-0.1428571f, -0.1428571f, 0.1428571f, 0.1428571f,
-0.1428571f, -0.1428571f, 0.1428571f, -0.1428571f,
-0.1428571f, -0.1428571f, 0.1428571f, -0.4285714f,
-0.1428571f, -0.1428571f, 0.1428571f, -0.7142857f,
-0.1428571f, -0.1428571f, 0.1428571f, -1.0f,

-0.1428571f, -0.4285714f, 0.1428571f, 1.0f,
-0.1428571f, -0.4285714f, 0.1428571f, 0.7142857f,
-0.1428571f, -0.4285714f, 0.1428571f, 0.4285714f,
-0.1428571f, -0.4285714f, 0.1428571f, 0.1428571f,
-0.1428571f, -0.4285714f, 0.1428571f, -0.1428571f,
-0.1428571f, -0.4285714f, 0.1428571f, -0.4285714f,
-0.1428571f, -0.4285714f, 0.1428571f, -0.7142857f,
-0.1428571f, -0.4285714f, 0.1428571f, -1.0f,

-0.1428571f, -0.7142857f, 0.1428571f, 1.0f,
-0.1428571f, -0.7142857f, 0.1428571f, 0.7142857f,
-0.1428571f, -0.7142857f, 0.1428571f, 0.4285714f,
-0.1428571f, -0.7142857f, 0.1428571f, 0.1428571f,
-0.1428571f, -0.7142857f, 0.1428571f, -0.1428571f,
-0.1428571f, -0.7142857f, 0.1428571f, -0.4285714f,
-0.1428571f, -0.7142857f, 0.1428571f, -0.7142857f,
-0.1428571f, -0.7142857f, 0.1428571f, -1.0f,

-0.1428571f, -1.0f, 0.1428571f, 1.0f,
-0.1428571f, -1.0f, 0.1428571f, 0.7142857f,
-0.1428571f, -1.0f, 0.1428571f, 0.4285714f,
-0.1428571f, -1.0f, 0.1428571f, 0.1428571f,
-0.1428571f, -1.0f, 0.1428571f, -0.1428571f,
-0.1428571f, -1.0f, 0.1428571f, -0.4285714f,
-0.1428571f, -1.0f, 0.1428571f, -0.7142857f,
-0.1428571f, -1.0f, 0.1428571f, -1.0f,

0.1428571f, 1.0f, 0.4285714f, 1.0f,
0.1428571f, 1.0f, 0.4285714f, 0.7142857f,
0.1428571f, 1.0f, 0.4285714f, 0.4285714f,
0.1428571f, 1.0f, 0.4285714f, 0.1428571f,
0.1428571f, 1.0f, 0.4285714f, -0.1428571f,
0.1428571f, 1.0f, 0.4285714f, -0.4285714f,
0.1428571f, 1.0f, 0.4285714f, -0.7142857f,
0.1428571f, 1.0f, 0.4285714f, -1.0f,

0.1428571f, 0.7142857f, 0.4285714f, 1.0f,
0.1428571f, 0.7142857f, 0.4285714f, 0.7142857f,
0.1428571f, 0.7142857f, 0.4285714f, 0.4285714f,
0.1428571f, 0.7142857f, 0.4285714f, 0.1428571f,
0.1428571f, 0.7142857f, 0.4285714f, -0.1428571f,
0.1428571f, 0.7142857f, 0.4285714f, -0.4285714f,
0.1428571f, 0.7142857f, 0.4285714f, -0.7142857f,
0.1428571f, 0.7142857f, 0.4285714f, -1.0f,

0.1428571f, 0.4285714f, 0.4285714f, 1.0f,
0.1428571f, 0.4285714f, 0.4285714f, 0.7142857f,
0.1428571f, 0.4285714f, 0.4285714f, 0.4285714f,
0.1428571f, 0.4285714f, 0.4285714f, 0.1428571f,
0.1428571f, 0.4285714f, 0.4285714f, -0.1428571f,
0.1428571f, 0.4285714f, 0.4285714f, -0.4285714f,
0.1428571f, 0.4285714f, 0.4285714f, -0.7142857f,
0.1428571f, 0.4285714f, 0.4285714f, -1.0f,

0.1428571f, 0.1428571f, 0.4285714f, 1.0f,
0.1428571f, 0.1428571f, 0.4285714f, 0.7142857f,
0.1428571f, 0.1428571f, 0.4285714f, 0.4285714f,
0.1428571f, 0.1428571f, 0.4285714f, 0.1428571f,
0.1428571f, 0.1428571f, 0.4285714f, -0.1428571f,
0.1428571f, 0.1428571f, 0.4285714f, -0.4285714f,
0.1428571f, 0.1428571f, 0.4285714f, -0.7142857f,
0.1428571f, 0.1428571f, 0.4285714f, -1.0f,

0.1428571f, -0.1428571f, 0.4285714f, 1.0f,
0.1428571f, -0.1428571f, 0.4285714f, 0.7142857f,
0.1428571f, -0.1428571f, 0.4285714f, 0.4285714f,
0.1428571f, -0.1428571f, 0.4285714f, 0.1428571f,
0.1428571f, -0.1428571f, 0.4285714f, -0.1428571f,
0.1428571f, -0.1428571f, 0.4285714f, -0.4285714f,
0.1428571f, -0.1428571f, 0.4285714f, -0.7142857f,
0.1428571f, -0.1428571f, 0.4285714f, -1.0f,

0.1428571f, -0.4285714f, 0.4285714f, 1.0f,
0.1428571f, -0.4285714f, 0.4285714f, 0.7142857f,
0.1428571f, -0.4285714f, 0.4285714f, 0.4285714f,
0.1428571f, -0.4285714f, 0.4285714f, 0.1428571f,
0.1428571f, -0.4285714f, 0.4285714f, -0.1428571f,
0.1428571f, -0.4285714f, 0.4285714f, -0.4285714f,
0.1428571f, -0.4285714f, 0.4285714f, -0.7142857f,
0.1428571f, -0.4285714f, 0.4285714f, -1.0f,

0.1428571f, -0.7142857f, 0.4285714f, 1.0f,
0.1428571f, -0.7142857f, 0.4285714f, 0.7142857f,
0.1428571f, -0.7142857f, 0.4285714f, 0.4285714f,
0.1428571f, -0.7142857f, 0.4285714f, 0.1428571f,
0.1428571f, -0.7142857f, 0.4285714f, -0.1428571f,
0.1428571f, -0.7142857f, 0.4285714f, -0.4285714f,
0.1428571f, -0.7142857f, 0.4285714f, -0.7142857f,
0.1428571f, -0.7142857f, 0.4285714f, -1.0f,

0.1428571f, -1.0f, 0.4285714f, 1.0f,
0.1428571f, -1.0f, 0.4285714f, 0.7142857f,
0.1428571f, -1.0f, 0.4285714f, 0.4285714f,
0.1428571f, -1.0f, 0.4285714f, 0.1428571f,
0.1428571f, -1.0f, 0.4285714f, -0.1428571f,
0.1428571f, -1.0f, 0.4285714f, -0.4285714f,
0.1428571f, -1.0f, 0.4285714f, -0.7142857f,
0.1428571f, -1.0f, 0.4285714f, -1.0f,

0.4285714f, 1.0f, 0.7142857f, 1.0f,
0.4285714f, 1.0f, 0.7142857f, 0.7142857f,
0.4285714f, 1.0f, 0.7142857f, 0.4285714f,
0.4285714f, 1.0f, 0.7142857f, 0.1428571f,
0.4285714f, 1.0f, 0.7142857f, -0.1428571f,
0.4285714f, 1.0f, 0.7142857f, -0.4285714f,
0.4285714f, 1.0f, 0.7142857f, -0.7142857f,
0.4285714f, 1.0f, 0.7142857f, -1.0f,

0.4285714f, 0.7142857f, 0.7142857f, 1.0f,
0.4285714f, 0.7142857f, 0.7142857f, 0.7142857f,
0.4285714f, 0.7142857f, 0.7142857f, 0.4285714f,
0.4285714f, 0.7142857f, 0.7142857f, 0.1428571f,
0.4285714f, 0.7142857f, 0.7142857f, -0.1428571f,
0.4285714f, 0.7142857f, 0.7142857f, -0.4285714f,
0.4285714f, 0.7142857f, 0.7142857f, -0.7142857f,
0.4285714f, 0.7142857f, 0.7142857f, -1.0f,

0.4285714f, 0.4285714f, 0.7142857f, 1.0f,
0.4285714f, 0.4285714f, 0.7142857f, 0.7142857f,
0.4285714f, 0.4285714f, 0.7142857f, 0.4285714f,
0.4285714f, 0.4285714f, 0.7142857f, 0.1428571f,
0.4285714f, 0.4285714f, 0.7142857f, -0.1428571f,
0.4285714f, 0.4285714f, 0.7142857f, -0.4285714f,
0.4285714f, 0.4285714f, 0.7142857f, -0.7142857f,
0.4285714f, 0.4285714f, 0.7142857f, -1.0f,

0.4285714f, 0.1428571f, 0.7142857f, 1.0f,
0.4285714f, 0.1428571f, 0.7142857f, 0.7142857f,
0.4285714f, 0.1428571f, 0.7142857f, 0.4285714f,
0.4285714f, 0.1428571f, 0.7142857f, 0.1428571f,
0.4285714f, 0.1428571f, 0.7142857f, -0.1428571f,
0.4285714f, 0.1428571f, 0.7142857f, -0.4285714f,
0.4285714f, 0.1428571f, 0.7142857f, -0.7142857f,
0.4285714f, 0.1428571f, 0.7142857f, -1.0f,

0.4285714f, -0.1428571f, 0.7142857f, 1.0f,
0.4285714f, -0.1428571f, 0.7142857f, 0.7142857f,
0.4285714f, -0.1428571f, 0.7142857f, 0.4285714f,
0.4285714f, -0.1428571f, 0.7142857f, 0.1428571f,
0.4285714f, -0.1428571f, 0.7142857f, -0.1428571f,
0.4285714f, -0.1428571f, 0.7142857f, -0.4285714f,
0.4285714f, -0.1428571f, 0.7142857f, -0.7142857f,
0.4285714f, -0.1428571f, 0.7142857f, -1.0f,

0.4285714f, -0.4285714f, 0.7142857f, 1.0f,
0.4285714f, -0.4285714f, 0.7142857f, 0.7142857f,
0.4285714f, -0.4285714f, 0.7142857f, 0.4285714f,
0.4285714f, -0.4285714f, 0.7142857f, 0.1428571f,
0.4285714f, -0.4285714f, 0.7142857f, -0.1428571f,
0.4285714f, -0.4285714f, 0.7142857f, -0.4285714f,
0.4285714f, -0.4285714f, 0.7142857f, -0.7142857f,
0.4285714f, -0.4285714f, 0.7142857f, -1.0f,

0.4285714f, -0.7142857f, 0.7142857f, 1.0f,
0.4285714f, -0.7142857f, 0.7142857f, 0.7142857f,
0.4285714f, -0.7142857f, 0.7142857f, 0.4285714f,
0.4285714f, -0.7142857f, 0.7142857f, 0.1428571f,
0.4285714f, -0.7142857f, 0.7142857f, -0.1428571f,
0.4285714f, -0.7142857f, 0.7142857f, -0.4285714f,
0.4285714f, -0.7142857f, 0.7142857f, -0.7142857f,
0.4285714f, -0.7142857f, 0.7142857f, -1.0f,

0.4285714f, -1.0f, 0.7142857f, 1.0f,
0.4285714f, -1.0f, 0.7142857f, 0.7142857f,
0.4285714f, -1.0f, 0.7142857f, 0.4285714f,
0.4285714f, -1.0f, 0.7142857f, 0.1428571f,
0.4285714f, -1.0f, 0.7142857f, -0.1428571f,
0.4285714f, -1.0f, 0.7142857f, -0.4285714f,
0.4285714f, -1.0f, 0.7142857f, -0.7142857f,
0.4285714f, -1.0f, 0.7142857f, -1.0f,

0.7142857f, 1.0f, 1.0f, 1.0f,
0.7142857f, 1.0f, 1.0f, 0.7142857f,
0.7142857f, 1.0f, 1.0f, 0.4285714f,
0.7142857f, 1.0f, 1.0f, 0.1428571f,
0.7142857f, 1.0f, 1.0f, -0.1428571f,
0.7142857f, 1.0f, 1.0f, -0.4285714f,
0.7142857f, 1.0f, 1.0f, -0.7142857f,
0.7142857f, 1.0f, 1.0f, -1.0f,

0.7142857f, 0.7142857f, 1.0f, 1.0f,
0.7142857f, 0.7142857f, 1.0f, 0.7142857f,
0.7142857f, 0.7142857f, 1.0f, 0.4285714f,
0.7142857f, 0.7142857f, 1.0f, 0.1428571f,
0.7142857f, 0.7142857f, 1.0f, -0.1428571f,
0.7142857f, 0.7142857f, 1.0f, -0.4285714f,
0.7142857f, 0.7142857f, 1.0f, -0.7142857f,
0.7142857f, 0.7142857f, 1.0f, -1.0f,

0.7142857f, 0.4285714f, 1.0f, 1.0f,
0.7142857f, 0.4285714f, 1.0f, 0.7142857f,
0.7142857f, 0.4285714f, 1.0f, 0.4285714f,
0.7142857f, 0.4285714f, 1.0f, 0.1428571f,
0.7142857f, 0.4285714f, 1.0f, -0.1428571f,
0.7142857f, 0.4285714f, 1.0f, -0.4285714f,
0.7142857f, 0.4285714f, 1.0f, -0.7142857f,
0.7142857f, 0.4285714f, 1.0f, -1.0f,

0.7142857f, 0.1428571f, 1.0f, 1.0f,
0.7142857f, 0.1428571f, 1.0f, 0.7142857f,
0.7142857f, 0.1428571f, 1.0f, 0.4285714f,
0.7142857f, 0.1428571f, 1.0f, 0.1428571f,
0.7142857f, 0.1428571f, 1.0f, -0.1428571f,
0.7142857f, 0.1428571f, 1.0f, -0.4285714f,
0.7142857f, 0.1428571f, 1.0f, -0.7142857f,
0.7142857f, 0.1428571f, 1.0f, -1.0f,

0.7142857f, -0.1428571f, 1.0f, 1.0f,
0.7142857f, -0.1428571f, 1.0f, 0.7142857f,
0.7142857f, -0.1428571f, 1.0f, 0.4285714f,
0.7142857f, -0.1428571f, 1.0f, 0.1428571f,
0.7142857f, -0.1428571f, 1.0f, -0.1428571f,
0.7142857f, -0.1428571f, 1.0f, -0.4285714f,
0.7142857f, -0.1428571f, 1.0f, -0.7142857f,
0.7142857f, -0.1428571f, 1.0f, -1.0f,

0.7142857f, -0.4285714f, 1.0f, 1.0f,
0.7142857f, -0.4285714f, 1.0f, 0.7142857f,
0.7142857f, -0.4285714f, 1.0f, 0.4285714f,
0.7142857f, -0.4285714f, 1.0f, 0.1428571f,
0.7142857f, -0.4285714f, 1.0f, -0.1428571f,
0.7142857f, -0.4285714f, 1.0f, -0.4285714f,
0.7142857f, -0.4285714f, 1.0f, -0.7142857f,
0.7142857f, -0.4285714f, 1.0f, -1.0f,

0.7142857f, -0.7142857f, 1.0f, 1.0f,
0.7142857f, -0.7142857f, 1.0f, 0.7142857f,
0.7142857f, -0.7142857f, 1.0f, 0.4285714f,
0.7142857f, -0.7142857f, 1.0f, 0.1428571f,
0.7142857f, -0.7142857f, 1.0f, -0.1428571f,
0.7142857f, -0.7142857f, 1.0f, -0.4285714f,
0.7142857f, -0.7142857f, 1.0f, -0.7142857f,
0.7142857f, -0.7142857f, 1.0f, -1.0f,

0.7142857f, -1.0f, 1.0f, 1.0f,
0.7142857f, -1.0f, 1.0f, 0.7142857f,
0.7142857f, -1.0f, 1.0f, 0.4285714f,
0.7142857f, -1.0f, 1.0f, 0.1428571f,
0.7142857f, -1.0f, 1.0f, -0.1428571f,
0.7142857f, -1.0f, 1.0f, -0.4285714f,
0.7142857f, -1.0f, 1.0f, -0.7142857f,
0.7142857f, -1.0f, 1.0f, -1.0f
};

const float NetworkOld::weightColor[896u] = {
	
1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,
1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f,

-1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f,
-1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f,
-1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f,
-1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f,
-1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f,
-1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f,
-1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f,
-1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f,
-1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f,
-1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f,
-1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f,
-1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f,
-1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f,
-1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f,
-1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f,
-1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f,
-1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f,
-1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f,
-1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f,
-1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f,
-1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f,
-1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f,
-1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f,
-1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f,
-1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f,
-1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f,
-1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f,
-1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f, -1.0f
};

const float NetworkOld::box[4u] = {
	-0.6f, -1.1f, 0.6f, 1.1f
};